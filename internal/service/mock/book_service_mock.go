// Code generated by mockery v2.32.0. DO NOT EDIT.

package mockService

import (
	mock "github.com/stretchr/testify/mock"

	web "latihan_sqlc/internal/models/web"
)

// IBoookService is an autogenerated mock type for the IBoookService type
type IBoookService struct {
	mock.Mock
}

// AddNewBook provides a mock function with given fields: request
func (_m *IBoookService) AddNewBook(request web.BookCreateForm) web.BookResponse {
	ret := _m.Called(request)

	var r0 web.BookResponse
	if rf, ok := ret.Get(0).(func(web.BookCreateForm) web.BookResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(web.BookResponse)
	}

	return r0
}

// Delete provides a mock function with given fields: bookId
func (_m *IBoookService) Delete(bookId int) {
	_m.Called(bookId)
}

// FindBookById provides a mock function with given fields: bookId
func (_m *IBoookService) FindBookById(bookId int) web.BookResponse {
	ret := _m.Called(bookId)

	var r0 web.BookResponse
	if rf, ok := ret.Get(0).(func(int) web.BookResponse); ok {
		r0 = rf(bookId)
	} else {
		r0 = ret.Get(0).(web.BookResponse)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields:
func (_m *IBoookService) GetAllBooks() []web.BookResponse {
	ret := _m.Called()

	var r0 []web.BookResponse
	if rf, ok := ret.Get(0).(func() []web.BookResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.BookResponse)
		}
	}

	return r0
}

// UpdateBook provides a mock function with given fields: request
func (_m *IBoookService) UpdateBook(request web.BookUpdateForm) web.BookResponse {
	ret := _m.Called(request)

	var r0 web.BookResponse
	if rf, ok := ret.Get(0).(func(web.BookUpdateForm) web.BookResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(web.BookResponse)
	}

	return r0
}

// NewIBoookService creates a new instance of IBoookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBoookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBoookService {
	mock := &IBoookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
