// Code generated by mockery v2.32.0. DO NOT EDIT.

package mockRepo

import (
	models "latihan_sqlc/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IBoookRepositories is an autogenerated mock type for the IBoookRepositories type
type IBoookRepositories struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: book
func (_m *IBoookRepositories) AddBook(book models.Books) models.Books {
	ret := _m.Called(book)

	var r0 models.Books
	if rf, ok := ret.Get(0).(func(models.Books) models.Books); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(models.Books)
	}

	return r0
}

// DeleteBookById provides a mock function with given fields: id
func (_m *IBoookRepositories) DeleteBookById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBook provides a mock function with given fields:
func (_m *IBoookRepositories) GetAllBook() []models.Books {
	ret := _m.Called()

	var r0 []models.Books
	if rf, ok := ret.Get(0).(func() []models.Books); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Books)
		}
	}

	return r0
}

// GetBookById provides a mock function with given fields: id
func (_m *IBoookRepositories) GetBookById(id int) (models.Books, error) {
	ret := _m.Called(id)

	var r0 models.Books
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Books, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) models.Books); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Books)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBookById provides a mock function with given fields: book
func (_m *IBoookRepositories) UpdateBookById(book models.Books) models.Books {
	ret := _m.Called(book)

	var r0 models.Books
	if rf, ok := ret.Get(0).(func(models.Books) models.Books); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(models.Books)
	}

	return r0
}

// NewIBoookRepositories creates a new instance of IBoookRepositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBoookRepositories(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBoookRepositories {
	mock := &IBoookRepositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
