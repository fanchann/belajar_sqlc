// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: books.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addNewBook = `-- name: AddNewBook :execresult
INSERT INTO books (
  author,title
) VALUES (
  ?, ?
)
`

type AddNewBookParams struct {
	Author string
	Title  string
}

func (q *Queries) AddNewBook(ctx context.Context, arg AddNewBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addNewBook, arg.Author, arg.Title)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM books
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author FROM books
ORDER BY title
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookById = `-- name: GetBookById :one
SELECT id, title, author FROM books
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBookById(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books set title = ?,author = ? WHERE id = ?
`

type UpdateBookParams struct {
	Title  string
	Author string
	ID     int32
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.Title, arg.Author, arg.ID)
	return err
}
